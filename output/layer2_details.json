[
  {
    "file": "data/sample_codebase/RepoScribe-master/RepoScribe/Program.cs",
    "classes": [
      {
        "name": "Program",
        "description": "The entry point of the RepoScribe tool, responsible for parsing command-line arguments, initializing logging, and orchestrating the codebase flattening process.",
        "methods": [
          {
            "name": "Main",
            "signature": "int Main(string[] args)",
            "description": "The main method that initializes logging, sets up command-line options, and invokes the root command handler to start processing the codebase.",
            "parameters": [
              "args (string[])"
            ],
            "returns": "int"
          }
        ]
      },
      {
        "name": "RootCommand",
        "description": "A command object representing the root command for the RepoScribe tool, which encapsulates options and handlers.",
        "methods": [
          {
            "name": "AddOption",
            "signature": "void AddOption(Option<T> option)",
            "description": "Adds a specified option to this command.",
            "parameters": [
              "option (Option<T>)"
            ],
            "returns": "void"
          },
          {
            "name": "SetHandler",
            "signature": "void SetHandler(Action<string[], string?, bool> handler)",
            "description": "Sets the command handler that will be invoked when this root command is executed.",
            "parameters": [
              "handler (Action<string[], string?, bool>)"
            ],
            "returns": "void"
          }
        ]
      },
      {
        "name": "Option",
        "description": "Represents an option that can be specified when invoking a command.",
        "methods": []
      },
      {
        "name": "ConfigurationManager",
        "description": "Manages configuration settings, such as language mappings and ignored paths, loaded from an appsettings.json file.",
        "methods": [
          {
            "name": "GetLanguageMap",
            "signature": "Dictionary<string, string> GetLanguageMap()",
            "description": "Retrieves the language mapping configuration.",
            "parameters": [],
            "returns": "Dictionary<string, string>"
          },
          {
            "name": "GetIgnoredPaths",
            "signature": "List<string> GetIgnoredPaths()",
            "description": "Retrieves a list of paths to ignore during processing.",
            "parameters": [],
            "returns": "List<string>"
          }
        ]
      },
      {
        "name": "FileHelper",
        "description": "Handles file operations, including processing files with registered handlers.",
        "methods": [
          {
            "name": "ProcessFile",
            "signature": "FileMetadata ProcessFile(string filePath)",
            "description": "Processes a given file path and returns metadata about the file.",
            "parameters": [
              "filePath (string)"
            ],
            "returns": "FileMetadata"
          }
        ]
      },
      {
        "name": "CodeFileHandler",
        "description": "Handles processing of code files, extracting metadata and content.",
        "methods": [
          {
            "name": "ProcessFile",
            "signature": "FileMetadata ProcessFile(string filePath)",
            "description": "Processes a code file, extracting metadata and content.",
            "parameters": [
              "filePath (string)"
            ],
            "returns": "FileMetadata"
          }
        ]
      },
      {
        "name": "FileMetadata",
        "description": "Represents metadata about a processed file, including its path and content.",
        "methods": []
      }
    ],
    "standalone_methods": [
      {
        "name": "Logger.Initialize",
        "signature": "void Initialize()",
        "description": "Initializes the logging system.",
        "parameters": [],
        "returns": "void"
      },
      {
        "name": "Path.GetFullPath",
        "signature": "string GetFullPath(string path)",
        "description": "Resolves a path to its full form, handling relative paths.",
        "parameters": [
          "path (string)"
        ],
        "returns": "string"
      },
      {
        "name": "Path.GetFileName",
        "signature": "string GetFileName(string path)",
        "description": "Extracts the file name from a given path.",
        "parameters": [
          "path (string)"
        ],
        "returns": "string"
      },
      {
        "name": "Directory.EnumerateFiles",
        "signature": "IEnumerable<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption)",
        "description": "Enumerates files in a directory matching a specified pattern.",
        "parameters": [
          "path (string)",
          "searchPattern (string)",
          "searchOption (SearchOption)"
        ],
        "returns": "IEnumerable<string>"
      },
      {
        "name": "Directory.Exists",
        "signature": "bool Exists(string path)",
        "description": "Checks if a directory exists.",
        "parameters": [
          "path (string)"
        ],
        "returns": "bool"
      },
      {
        "name": "Environment.ExpandEnvironmentVariables",
        "signature": "string ExpandEnvironmentVariables(string path)",
        "description": "Expands environment variables in a given path string.",
        "parameters": [
          "path (string)"
        ],
        "returns": "string"
      },
      {
        "name": "File.WriteAllText",
        "signature": "void WriteAllText(string path, string contents)",
        "description": "Writes all text to a specified file.",
        "parameters": [
          "path (string)",
          "contents (string)"
        ],
        "returns": "void"
      },
      {
        "name": "Log.Information",
        "signature": "void Information(string message, params object[] args)",
        "description": "Logs an informational message.",
        "parameters": [
          "message (string)",
          "args (object[])"
        ],
        "returns": "void"
      },
      {
        "name": "Log.Error",
        "signature": "void Error(Exception ex, string message, params object[] args)",
        "description": "Logs an error message with additional context.",
        "parameters": [
          "ex (Exception)",
          "message (string)",
          "args (object[])"
        ],
        "returns": "void"
      },
      {
        "name": "Log.Warning",
        "signature": "void Warning(Exception ex, string message, params object[] args)",
        "description": "Logs a warning message with additional context.",
        "parameters": [
          "ex (Exception)",
          "message (string)",
          "args (object[])"
        ],
        "returns": "void"
      },
      {
        "name": "Log.CloseAndFlush",
        "signature": "void CloseAndFlush()",
        "description": "Closes and flushes the logging system.",
        "parameters": [],
        "returns": "void"
      }
    ]
  },
  {
    "file": "data/sample_codebase/RepoScribe-master/RepoScribe/AssemblyInfo.cs",
    "classes": [
      {
        "name": "AssemblyInfo",
        "description": "This file is an assembly information file, specifying visibility for internal types. It allows the 'Flattener.Tests' project to access internal components of the current assembly for testing purposes.",
        "methods": []
      }
    ],
    "standalone_methods": []
  }
]